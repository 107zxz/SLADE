
sladescript : lua
{
	name = "SLADE Script";
	case_sensitive = true;

	properties =
	{
		// Namespaces
		App, Archives, Game, UI
	}

	types =
	{
		Archive, ArchiveDir, ArchiveEntry, ArchiveFormat, ArchiveSearchOptions, EntryType,
		ThingType,
		Map, MapEditor, MapLine, MapObject, MapSector, MapSide, MapThing, MapVertex,
		Colour, Plane, Point
	}

	functions
	{
		// App namespace
						App.LogMessage = "string message";
		Archive			App.CurrentArchive;
		ArchiveEntry	App.CurrentEntry;
		ArchiveEntry[]	App.CurrentEntrySelection;
						App.ShowArchive = "Archive archive";
						App.ShowEntry = "ArchiveEntry entry";
		MapEditor		App.MapEditor;

		// Archives namespace
		Archive[]		Archives.All;
		Archive			Archives.Create = "string format_id";
		Archive			Archives.OpenFile = "string path";
		boolean			Archives.Close = "Archive archive", "number index";
						Archives.CloseAll;
		string			Archives.FileExtensionsString;
		Archive			Archives.BaseResource;
		string[]		Archives.BaseResourcePaths;
		boolean			Archives.OpenBaseResource = "number index";
		Archive			Archives.ProgramResource;
		string[]		Archives.RecentFiles;
		ArchiveEntry[]	Archives.Bookmarks;
						Archives.AddBookmark = "ArchiveEntry entry";
		boolean			Archives.RemoveBookmark = "ArchiveEntry entry";
		EntryType		Archives.EntryType = "string id";

		// Game namespace
		ThingType	Game.ThingType = "number type";

		// UI namespace
					UI.MessageBox = "string title, string message";
					UI.MessageBoxExt = "string title, string message, string detail";
		string		UI.PromptString = "string title, string message, string default_value";
		number		UI.PromptNumber = "string title, string message, number default_value, number min, number max";
		boolean		UI.PromptYesNo = "string title, string message";
		string		UI.BrowseFile = "string title, string extensions, string filename";
		string[]	UI.BrowseFiles = "string title, string extensions";
					UI.ShowSplash = "string message, [boolean progress]";
					UI.HideSplash;
					UI.UpdateSplash;
		number		UI.SplashProgress;
					UI.SetSplashMessage = "string message";
					UI.SetSplashProgressMessage = "string message";
					UI.SetSplashProgress = "number progress";

		// Archive type
		ArchiveDir		Archive.GetDir = "string path";
		ArchiveEntry	Archive.CreateEntry = "string full_path, number position";
		ArchiveEntry	Archive.CreateEntryInNamespace = "string name, string namespace";
		boolean			Archive.RemoveEntry = "ArchiveEntry entry";
		boolean			Archive.RenameEntry = "ArchiveEntry entry, string name";
		boolean			Archive.Save = "[string path]";

		// ArchiveEntry type
		string	ArchiveEntry.FormattedName = "[boolean include_path], [boolean include_extension], [boolean upper_case]";
		string	ArchiveEntry.FormattedSize;
		boolean	ArchiveEntry.ImportFile = "string path";
		boolean	ArchiveEntry.ImportEntry = "ArchiveEntry entry";
		boolean ArchiveEntry.ImportData = "string data";
		boolean ArchiveEntry.ExportFile = "string path";

		// MapEditor type
		MapVertex[]	MapEditor.SelectedVertices = "[boolean try_highlight]";
		MapLine[]	MapEditor.SelectedLines = "[boolean try_highlight]";
		MapSector[]	MapEditor.SelectedSectors = "[boolean try_highlight]";
		MapThing[]	MapEditor.SelectedThings = "[boolean try_highlight]";
					MapEditor.ClearSelection;
					MapEditor.Select = "MapObject object, [boolean select]";
					MapEditor.SetEditMode = "number mode, number sector_mode";
		
		// MapLine type
		boolean	MapLine.Flag = "string flag_name";
				MapLine.Flip = "[boolean swap_sides]";
		
		// MapObject type
		boolean	MapObject.HasProperty = "string name";
		boolean	MapObject.BoolProperty = "string name";
		number	MapObject.IntProperty = "string name";
		number	MapObject.FloatProperty = "string name";
		string	MapObject.StringProperty = "string name";
				MapObject.SetBoolProperty = "string name, boolean value";
				MapObject.SetIntProperty = "string name, number value";
				MapObject.SetFloatProperty = "string name, number value";
				MapObject.SetStringProperty = "string name, string value";
		
		// MapSector type
		boolean	MapSector.ContainsPoint = "Point position";

		// MapThing type
		boolean	MapThing.Flag = "string flag_name";
				MapThing.SetAnglePoint = "Point position";
		
		// Plane type
		number	Plane.HeightAt = "Point position";
	}
}
